import numpy as np
import pickle


# # load data
# with open('mean_angles.pickle', 'rb') as fr:
#     user_loaded = pickle.load(fr)
    
    
def find_closest_time_point_weighted(input_data, mean_data, angle_weight=1.0, velocity_weight=0.0):
    """
    Find the time point (0-100%) that is closest to the input_data based on mean_data with different weights for angles and velocities.
    
    :param input_data: A dictionary with keys corresponding to the joint angles and velocities.
                       Example: {'hip_flexion_r': value, 'knee_angle_r': value, ...}
    :param mean_data: A dictionary containing the mean values of the joint angles and velocities.
    :param angle_weight: The weight to give to angle differences.
    :param velocity_weight: The weight to give to velocity differences.
    :return: The time point (0-100%) that is closest to the input_data.
    """
    min_diff = float('inf')
    closest_time_point = -1
    
    for t in range(100):  # Iterate over each time point from 0 to 100 (representing 0-100%)
        diff = np.sum((mean_data[:,t] - input_data) ** 2)
        if diff < min_diff:
            min_diff = diff
            closest_time_point = t
    
    return closest_time_point * 0.01


# for i in range(101):

#     input_data = {
#         'hip_flexion_r'     : best_knee['hip_flexion_r'][0][i],
#         'knee_angle_r'      : best_knee['knee_angle_r'][0][i],
#         'ankle_angle_r'     : best_knee['ankle_angle_r'][0][i],
#         'hip_flexion_r_u'   : best_knee['hip_flexion_r_u'][0][i],
#         'knee_angle_r_u'    : best_knee['knee_angle_r_u'][0][i],
#         'ankle_angle_r_u'   : best_knee['ankle_angle_r_u'][0][i],
#         'hip_flexion_l'     : best_knee['hip_flexion_l'][0][i],
#         'knee_angle_l'      : best_knee['knee_angle_l'][0][i],
#         'ankle_angle_l'     : best_knee['ankle_angle_l'][0][i],
#         'hip_flexion_l_u'   : best_knee['hip_flexion_l_u'][0][i],
#         'knee_angle_l_u'    : best_knee['knee_angle_l_u'][0][i],
#         'ankle_angle_l_u'   : best_knee['ankle_angle_l_u'][0][i]   }
    
#     closest_time_point = find_closest_time_point_weighted(input_data, mean_angles, angle_weight=1.0, velocity_weight=0.0)
#     print(closest_time_point)

def phase_detect(input_data, reference_data):  # 은식이형 헬프-> 짜잔


    # reference_dofs = np.array([
    #     [5.16849247e+01, -4.14992552e+01, -1.09419197e+00, 4.73607406e+00, -6.10476962e+01, 4.05966825e+00],
    #     [4.90678986e+01, -4.00376312e+01, -1.14165309e+00, 5.68762320e+00, -6.15016748e+01, 4.90645069e+00],
    #     [4.64508725e+01, -3.85760073e+01, -1.18911421e+00, 6.63917234e+00, -6.19556534e+01, 5.75323313e+00],
    #     [4.39307852e+01, -3.80455031e+01, 3.95047449e-01, 7.78539192e+00, -6.24433357e+01, 6.56807992e+00],
    #     [4.14706425e+01, -3.80691835e+01, 2.94202884e+00, 9.05250670e+00, -6.29521433e+01, 7.36362198e+00],
    #     [3.90689949e+01, -3.80815510e+01, 5.26719958e+00, 1.04456257e+01, -6.34778351e+01, 8.15766631e+00],
    #     [3.68577278e+01, -3.80681704e+01, 6.90232304e+00, 1.22319565e+01, -6.40547569e+01, 8.94710581e+00],
    #     [3.46482267e+01, -3.80547503e+01, 8.53196520e+00, 1.40209367e+01, -6.46314697e+01, 9.73621311e+00],
    #     [3.26813892e+01, -3.80338442e+01, 9.38291581e+00, 1.61701812e+01, -6.51694380e+01, 1.04669878e+01],
    #     [3.07548100e+01, -3.80127091e+01, 1.01026263e+01, 1.83769203e+01, -6.56986409e+01, 1.11886053e+01],
    #     [2.89350690e+01, -3.79902007e+01, 1.03961768e+01, 2.06996378e+01, -6.61416188e+01, 1.18909503e+01],
    #     [2.72307671e+01, -3.79706496e+01, 1.02364389e+01, 2.31414043e+01, -6.64921407e+01, 1.25700314e+01],
    #     [2.55546849e+01, -3.79585524e+01, 9.96862460e+00, 2.55973161e+01, -6.68163749e+01, 1.32385145e+01],
    #     [2.40594373e+01, -3.80024645e+01, 9.03156146e+00, 2.81402007e+01, -6.69829362e+01, 1.38431228e+01],
    #     [2.25731070e+01, -3.80509148e+01, 8.06428415e+00, 3.06847149e+01, -6.71430115e+01, 1.44456635e+01],
    #     [2.12169503e+01, -3.81635402e+01, 6.60514180e+00, 3.32330739e+01, -6.72144186e+01, 1.50165635e+01],
    #     [1.99140271e+01, -3.83023415e+01, 4.94364271e+00, 3.57815382e+01, -6.72533973e+01, 1.55732613e+01],
    #     [1.86667599e+01, -3.84569565e+01, 3.03221060e+00, 3.83195348e+01, -6.72838119e+01, 1.61076654e+01],
    #     [1.75253497e+01, -3.86446670e+01, 6.74321069e-01, 4.08429619e+01, -6.73052025e+01, 1.66024874e+01],
    #     [1.64024315e+01, -3.88390058e+01, -1.74429126e+00, 4.33675166e+01, -6.73327478e+01, 1.70928118e+01],
    #     [1.54389814e+01, -3.90865127e+01, -4.71397000e+00, 4.58959957e+01, -6.74139197e+01, 1.75432050e+01],
    #     [1.44934135e+01, -3.93412777e+01, -7.75497778e+00, 4.84205575e+01, -6.75015468e+01, 1.79886561e+01],
    #     [1.35967295e+01, -3.96333825e+01, -1.08418681e+01, 5.09187417e+01, -6.76239160e+01, 1.84144843e+01],
    #     [1.27183442e+01, -3.99679551e+01, -1.35798293e+01, 5.33767766e+01, -6.77694093e+01, 1.88109880e+01],
    #     [1.18327565e+01, -4.03670758e+01, -1.56488410e+01, 5.57868808e+01, -6.79254321e+01, 1.91546430e+01],
    #     [1.09344155e+01, -4.09164979e+01, -1.61870726e+01, 5.80588854e+01, -6.80847696e+01, 1.93377308e+01],
    #     [1.00529287e+01, -4.15019033e+01, -1.67148565e+01, 6.02850370e+01, -6.82134749e+01, 1.94483270e+01],
    #     [9.25350290e+00, -4.22510018e+01, -1.72086423e+01, 6.22854451e+01, -6.81854054e+01, 1.92518432e+01],
    #     [8.48816299e+00, -4.30478659e+01, -1.76080173e+01, 6.41745149e+01, -6.80649886e+01, 1.89660553e+01],
    #     [7.78021049e+00, -4.38809428e+01, -1.78414290e+01, 6.58506511e+01, -6.77474402e+01, 1.86030596e+01],
    #     [7.13823104e+00, -4.47423927e+01, -1.79100440e+01, 6.72824453e+01, -6.72098585e+01, 1.81574754e+01],
    #     [6.52733327e+00, -4.55906128e+01, -1.79619878e+01, 6.85962744e+01, -6.65708410e+01, 1.76921717e+01],
    #     [6.02311127e+00, -4.63983877e+01, -1.79471397e+01, 6.95114173e+01, -6.56019530e+01, 1.71647136e+01],
    #     [5.54970404e+00, -4.71842633e+01, -1.79309402e+01, 7.03155506e+01, -6.45656323e+01, 1.66321640e+01],
    #     [5.16210279e+00, -4.79117649e+01, -1.78961788e+01, 7.08134264e+01, -6.33492993e+01, 1.60767455e+01],
    #     [4.83694597e+00, -4.86001975e+01, -1.78352799e+01, 7.10926052e+01, -6.20223155e+01, 1.55067883e+01],
    #     [4.57322713e+00, -4.92540224e+01, -1.77353000e+01, 7.11615766e+01, -6.06167977e+01, 1.49299852e+01],
    #     [4.40256938e+00, -4.98653542e+01, -1.75739806e+01, 7.09179661e+01, -5.90967103e+01, 1.43427031e+01],
    #     [4.27468215e+00, -5.04839405e+01, -1.73798376e+01, 7.05395619e+01, -5.75421252e+01, 1.37507361e+01],
    #     [4.26377574e+00, -5.11169490e+01, -1.70902936e+01, 6.97899894e+01, -5.58863339e+01, 1.31443731e+01],
    #     [4.31458755e+00, -5.17969377e+01, -1.67614384e+01, 6.88659953e+01, -5.41888143e+01, 1.25319987e+01],
    #     [4.45683231e+00, -5.25577372e+01, -1.63788132e+01, 6.76870972e+01, -5.24311595e+01, 1.19099781e+01],
    #     [4.68822063e+00, -5.34076547e+01, -1.59490807e+01, 6.62599376e+01, -5.06097453e+01, 1.12713730e+01],
    #     [4.98476095e+00, -5.43456811e+01, -1.54940957e+01, 6.46521814e+01, -4.87327192e+01, 1.06054833e+01],
    #     [5.40158181e+00, -5.54445479e+01, -1.49971757e+01, 6.27075614e+01, -4.67491360e+01, 9.88811700e+00],
    #     [5.86676923e+00, -5.66219317e+01, -1.44836926e+01, 6.06057270e+01, -4.47022381e+01, 9.13233903e+00],
    #     [6.42383479e+00, -5.79469534e+01, -1.39431135e+01, 5.82096017e+01, -4.25442804e+01, 8.29307174e+00],
    #     [7.04162017e+00, -5.93625727e+01, -1.33887340e+01, 5.56924085e+01, -4.05488693e+01, 7.44547820e+00],
    #     [7.73354247e+00, -6.08774856e+01, -1.28242911e+01, 5.31229741e+01, -3.90190774e+01, 6.70010896e+00],
    #     [8.54370511e+00, -6.25175072e+01, -1.22600577e+01, 5.05687647e+01, -3.81729693e+01, 6.32022983e+00],
    #     [9.52060480e+00, -6.42437494e+01, -1.17419848e+01, 4.82890010e+01, -3.80689208e+01, 6.90772829e+00],
    #     [1.09205517e+01, -6.61794732e+01, -1.12878905e+01, 4.66827190e+01, -3.97189685e+01, 9.81300195e+00],
    #     [1.24593527e+01, -6.81283242e+01, -1.08181480e+01, 4.51044796e+01, -4.12797646e+01, 1.23776371e+01],
    #     [1.42343201e+01, -7.00905989e+01, -1.03149155e+01, 4.35457512e+01, -4.26304431e+01, 1.43012877e+01],
    #     [1.61634603e+01, -7.20173260e+01, -9.79169839e+00, 4.19197505e+01, -4.37139792e+01, 1.58415997e+01],
    #     [1.81633284e+01, -7.38419461e+01, -9.26831825e+00, 4.01087803e+01, -4.44260509e+01, 1.72829797e+01],
    #     [2.02627074e+01, -7.55039272e+01, -8.74559696e+00, 3.80164263e+01, -4.45750986e+01, 1.85711818e+01],
    #     [2.23803052e+01, -7.70541505e+01, -8.22328796e+00, 3.58076265e+01, -4.44792312e+01, 1.97365871e+01],
    #     [2.45312883e+01, -7.83809396e+01, -7.72297162e+00, 3.33773224e+01, -4.39089429e+01, 2.06234832e+01],
    #     [2.66798562e+01, -7.95848794e+01, -7.22138155e+00, 3.08666939e+01, -4.31477508e+01, 2.13001541e+01],
    #     [2.88141039e+01, -8.06254567e+01, -6.72807564e+00, 2.82852381e+01, -4.21889422e+01, 2.16331617e+01],
    #     [3.09278932e+01, -8.15017042e+01, -6.24174732e+00, 2.56545269e+01, -4.10661546e+01, 2.15883841e+01],
    #     [3.30168310e+01, -8.22713609e+01, -5.76386967e+00, 2.30414557e+01, -3.99157550e+01, 2.12336668e+01],
    #     [3.50509563e+01, -8.28217988e+01, -5.30772177e+00, 2.04888285e+01, -3.87462396e+01, 2.02181282e+01],
    #     [3.70620818e+01, -8.33036386e+01, -4.85844129e+00, 1.79890106e+01, -3.76151725e+01, 1.89498821e+01],
    #     [3.90245774e+01, -8.36281990e+01, -4.43216601e+00, 1.56244245e+01, -3.65841252e+01, 1.70922566e+01],
    #     [4.09571324e+01, -8.38572791e+01, -4.02143601e+00, 1.33681071e+01, -3.56356838e+01, 1.48460999e+01],
    #     [4.28713129e+01, -8.39942846e+01, -3.62892122e+00, 1.12680737e+01, -3.48150377e+01, 1.22024388e+01],
    #     [4.47679845e+01, -8.40083556e+01, -3.26127046e+00, 9.40593771e+00, -3.41889309e+01, 9.01631153e+00],
    #     [4.66646141e+01, -8.39826951e+01, -2.90211425e+00, 7.64666591e+00, -3.36476575e+01, 5.65580943e+00],
    #     [4.85532876e+01, -8.37841123e+01, -2.57466931e+00, 6.24957144e+00, -3.34039234e+01, 1.77201737e+00],
    #     [5.04456506e+01, -8.35363929e+01, -2.25671732e+00, 4.95058333e+00, -3.32614699e+01, -1.94137837e+00],
    #     [5.23415696e+01, -8.31505101e+01, -1.95957451e+00, 3.85336932e+00, -3.33523206e+01, -4.73162895e+00],
    #     [5.42403143e+01, -8.26263893e+01, -1.68022699e+00, 2.93629949e+00, -3.36894773e+01, -6.48673777e+00],
    #     [5.61340593e+01, -8.19873438e+01, -1.41118001e+00, 2.13579481e+00, -3.42138406e+01, -7.65652681e+00],
    #     [5.79959223e+01, -8.10539558e+01, -1.16238456e+00, 1.60691159e+00, -3.51662961e+01, -7.88608320e+00],
    #     [5.98333671e+01, -8.00397831e+01, -9.12714436e-01, 1.12623709e+00, -3.61955541e+01, -8.08938890e+00],
    #     [6.15360069e+01, -7.86731960e+01, -6.59598464e-01, 8.37844762e-01, -3.75454864e+01, -7.97301970e+00],
    #     [6.31692433e+01, -7.71879846e+01, -4.07258215e-01, 6.01895130e-01, -3.89818805e+01, -7.82037551e+00],
    #     [6.46513559e+01, -7.55550001e+01, -1.55971564e-01, 4.07260930e-01, -4.04815014e+01, -7.77975147e+00],
    #     [6.59383471e+01, -7.37976390e+01, 9.49765293e-02, 2.47462843e-01, -4.20201971e+01, -7.80663055e+00],
    #     [6.71778230e+01, -7.20422611e+01, 3.45889315e-01, 8.74912014e-02, -4.35467768e+01, -7.81368933e+00],
    #     [6.81234583e+01, -7.03499869e+01, 5.90684239e-01, -7.59910537e-02, -4.49744370e+01, -7.72979757e+00],
    #     [6.90383045e+01, -6.86810029e+01, 8.33268094e-01, -2.41206540e-01, -4.63825992e+01, -7.62784616e+00],
    #     [6.97325458e+01, -6.71931249e+01, 1.06105824e+00, -4.16031206e-01, -4.76459790e+01, -7.39324991e+00],
    #     [7.03039532e+01, -6.58115458e+01, 1.27994410e+00, -5.91302683e-01, -4.88264571e+01, -7.09337490e+00],
    #     [7.07732313e+01, -6.45202649e+01, 1.49223907e+00, -7.57894391e-01, -4.99416604e+01, -6.74887912e+00],
    #     [7.09897629e+01, -6.34258229e+01, 1.68706963e+00, -8.90523783e-01, -5.09088059e+01, -6.30367541e+00],
    #     [7.11898543e+01, -6.23391582e+01, 1.88052932e+00, -1.01906022e+00, -5.18692055e+01, -5.85383670e+00],
    #     [7.10580311e+01, -6.13724179e+01, 2.04536230e+00, -1.05420118e+00, -5.27070433e+01, -5.30642543e+00],
    #     [7.08706640e+01, -6.04155989e+01, 2.20486839e+00, -1.07097855e+00, -5.35290634e+01, -4.74637100e+00],
    #     [7.04527642e+01, -5.94372465e+01, 2.33732146e+00, -1.00315141e+00, -5.43049431e+01, -4.13362653e+00],
    #     [6.98171783e+01, -5.84270206e+01, 2.44248580e+00, -8.53279847e-01, -5.50413941e+01, -3.47339385e+00],
    #     [6.91122677e+01, -5.73890432e+01, 2.53505411e+00, -6.76852357e-01, -5.57685384e+01, -2.80160568e+00],
    #     [6.79931597e+01, -5.61638501e+01, 2.52865677e+00, -3.41875721e-01, -5.64413484e+01, -2.09920996e+00],
    #     [6.68710447e+01, -5.49368073e+01, 2.52100170e+00, -5.76649663e-03, -5.71138590e+01, -1.39759768e+00],
    #     [6.53605920e+01, -5.34383192e+01, 2.24589688e+00, 4.65668545e-01, -5.77329750e+01, -7.14106852e-01],
    #     [6.37261951e+01, -5.18519702e+01, 1.88644506e+00, 9.79479453e-01, -5.83346630e+01, -3.88760571e-02],
    #     [6.19017476e+01, -5.01283430e+01, 1.46323529e+00, 1.54909775e+00, -5.89047028e+01, 6.48338509e-01],
    #     [5.97677695e+01, -4.81831475e+01, 9.36748111e-01, 2.20900052e+00, -5.94230174e+01, 1.35842350e+00],
    #     [5.76337914e+01, -4.62379519e+01, 4.10260932e-01, 2.86890329e+00, -5.99413319e+01, 2.06850850e+00]
    # ])

    # Calculate the differences for all reference points at once
    differences = np.sum((reference_data - input_data) ** 2, axis=1)

    # Find the index of the minimum difference
    closest_index = np.argmin(differences)

    # Calculate the closest time percent
    closest_time_percent = (closest_index // 10) * 10

    phi = np.array([closest_time_percent * 0.01])

    return phi.copy()
