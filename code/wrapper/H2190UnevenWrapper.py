import gym
import random
import os
import numpy as np
import sys
from gym.spaces import Box
from gym import Wrapper, spaces
from tempfile import NamedTemporaryFile
# SCONE native 라이브러리 로딩 (필요 시 경로 수정)
if sys.platform.startswith("win"):
    sys.path.append("C:/Program Files/SCONE/bin")
elif sys.platform.startswith("linux"):
    sys.path.append("/opt/scone/lib")
else:
    sys.path.append("/Applications/SCONE.app/Contents/MacOS/lib")

import sconepy
import random
class H2190UnevenWrapper(Wrapper):
    """
    Wrapper that:
      1) env.init_activations_mean/std 자동 설정
      2) action → [-1,1]→[0,1] 매핑
      3) (옵션) synergy 차원 → full actuator 차원 변환
      4) (옵션) phase(phi) ≥ 0.5 시 left/right action 교환 (symmetry)
      5) _get_obs_3d 수정본 로직 적용
    """
    def __init__(
        self,
        env: gym.Env,
        syn_matrix: np.ndarray, 
        n_syn: int,
        terrain_dir: str,           # ← 추가: 지형 파일들이 있는 폴더
        n_terrains: int = 100,      # ← 추가: 랜덤 시나리오 개수
        use_synergy: bool = True,
        use_symmetry: bool = True,
        init_activations_mean: float = 0.01,
        init_activations_std:  float = 0.0,
        fall_penalty: float = 100.0,
        step_size: float = 0.025,
    ):
        super().__init__(env)
        # --- 0) Random terrain 설정 ---
        self.terrain_dir  = terrain_dir
        self.n_terrains   = n_terrains
        self._do_store_next = False
        # 1) 초기 활성화 파라미터 설정
        env.init_activations_mean = init_activations_mean
        env.init_activations_std  = init_activations_std

        # synergy/symmetry 플래그 & 매트릭스
        self.syn_matrix   = syn_matrix
        self.n_syn        = n_syn
        self.use_synergy  = use_synergy
        self.use_symmetry = use_symmetry
        self.fall_penalty = fall_penalty
        self.step_size = step_size
        act_dim = 2 * n_syn + 10 if use_synergy else env.action_space.shape[0]
        self.action_space = Box(
            low=-np.ones(act_dim, dtype=np.float32),
            high=np.ones(act_dim, dtype=np.float32),
            dtype=np.float32,
        )

        # --- ② 관측 공간 재설정: 한 번 더미 obs 뽑아서 shape 확인 ---
        dummy_obs = self._get_obs_3d()
        self.observation_space = Box(
            low=-np.inf,
            high=np.inf,
            shape=dummy_obs.shape,
            dtype=np.float32,
        )
        self.reference_dofs = np.array([
            [0.718326848080477, -0.277692022349054, -0.0549847617019060, -0.0423769714177072, -0.946861126306273,
             -0.453615342817190],
            [0.714413140475661, -0.308330856720424, -0.0605022954507349, -0.0127415562489841, -1.03380951240571,
             -0.424075352784946],
            [0.711017164470330, -0.339872456882130, -0.0647419739226512, 0.0168582266643793, -1.12018673617755,
             -0.394760929461795],
            [0.708105208309012, -0.372744482098415, -0.0666240967548798, 0.0469178035831627, -1.20525516922502,
             -0.365823256856695],
            [0.705614889345548, -0.407295438354916, -0.0651451817097329, 0.0779168805811260, -1.28828505236137,
             -0.337417035342145],
            [0.703407468267342, -0.443659386841130, -0.0595117848595570, 0.110289418533548, -1.36856811787334,
             -0.309706080953792],
            [0.701273625748708, -0.481744048722840, -0.0491792283852432, 0.144397114294558, -1.44542014544525,
             -0.282860653246373],
            [0.698937756037892, -0.521229105614256, -0.0338760177403506, 0.180515243470123, -1.51818502945888,
             -0.257052737320937],
            [0.696060097899593, -0.561558991446712, -0.0136369850087275, 0.218816993759378, -1.58624122474947,
             -0.232450334145692],
            [0.692249643801920, -0.601963057300976, 0.0111786909984053, 0.259359301083056, -1.64901050960743,
             -0.209207353639407],
            [0.687085754532964, -0.641511869712389, 0.0399199951001103, 0.302086887124741, -1.70596328382134,
             -0.187455096250411],
            [0.680135922681535, -0.679162908265888, 0.0716692237164465, 0.346834540691430, -1.75662475637375,
             -0.167295465363158],
            [0.670978991504414, -0.713818759591790, 0.105271041190816, 0.393327876088954, -1.80058562803956,
             -0.148792200506479],
            [0.659229511400172, -0.744399834885931, 0.139401594911359, 0.441199730976199, -1.83750687572229,
             -0.131968066089050],
            [0.644554443311692, -0.769897285225848, 0.172630091645146, 0.490006716424497, -1.86712144075754,
             -0.116805671052140],
            [0.626692306633713, -0.789428637748976, 0.203477873364132, 0.539242773819280, -1.88923978912040,
             -0.103247297718596],
            [0.605471140580794, -0.802293783383759, 0.230497280850194, 0.588360957727680, -1.90375203968078,
             -0.0911991993409066],
            [0.580813364041996, -0.807998031286729, 0.252335227779217, 0.636796259680799, -1.91062177780933,
             -0.0805403246372112],
            [0.552742138552322, -0.806274465311315, 0.267787481380735, 0.683983515978823, -1.90988350247730,
             -0.0711291814759062],
            [0.521389639214164, -0.797110469851517, 0.275868381759444, 0.729379943132464, -1.90164038281682,
             -0.0628132378987367],
            [0.486989422514494, -0.780735175034506, 0.275848221112067, 0.772483496584463, -1.88605341925914,
             -0.0554403796573252],
            [0.449869046875675, -0.757605902887570, 0.267275977248586, 0.812844889951431, -1.86333363456685,
             -0.0488672483510551],
            [0.410445603427539, -0.728402494974579, 0.250015266686871, 0.850082292042992, -1.83373653134988,
             -0.0429686102530949],
            [0.369210574185657, -0.693998205993210, 0.224251252906028, 0.883889613528771, -1.79755333637796,
             -0.0376453927102468],
            [0.326711169147323, -0.655422437219813, 0.190467110149435, 0.914035187279406, -1.75510364668368,
             -0.0328274732513409],
            [0.283535589986181, -0.613834863519237, 0.149432970847436, 0.940362603135967, -1.70673164860078,
             -0.0284763274728347],
            [0.240292252423397, -0.570490807896174, 0.102181060147844, 0.962788437476276, -1.65280379791662,
             -0.0245858363761674],
            [0.197586971139972, -0.526697855499816, 0.0499429790263239, 0.981289355711060, -1.59370746645648,
             -0.0211767018082040],
            [0.156005559967099, -0.483784101225799, -0.00589816739690268, 0.995893024487851, -1.52985232173097,
             -0.0182915622993164],
            [0.116092239483855, -0.443061116310287, -0.0638623300246803, 1.00666940943635, -1.46167513310805,
             -0.0159890338625295],
            [0.0783317181341075, -0.405784981242550, -0.122447282945245, 1.01371815806115, -1.38964538889785,
             -0.0143344302159708],
            [0.0431398184439341, -0.373128997484122, -0.180186443731189, 1.01716035784630, -1.31427008449990,
             -0.0133925628925672],
            [0.0108520606553308, -0.346152834384092, -0.235706160465429, 1.01713356187933, -1.23610127158903,
             -0.0132210364920824],
            [-0.0182841930748237, -0.325769054484291, -0.287789942836116, 1.01378909281199, -1.15574479713205,
             -0.0138632751174575],
            [-0.0441045666068558, -0.312730238732753, -0.335411031534390, 1.00729240164533, -1.07386226399608,
             -0.0153456540852623],
            [-0.0665248488578352, -0.307614482372428, -0.377759453003679, 0.997825708089549, -0.991173679481386,
             -0.0176757465202445],
            [-0.0855378482186416, -0.310803714143609, -0.414274737275360, 0.985594174715428, -0.908461039943499,
             -0.0208411169416204],
            [-0.101198999611659, -0.322487979306359, -0.444637862289233, 0.970831362832685, -0.826561114775500,
             -0.0248124295599565],
            [-0.113614480763025, -0.342672788780588, -0.468755543751588, 0.953803004637045, -0.746356548157971,
             -0.0295465845711392],
            [-0.122931116750857, -0.371178356329762, -0.486750857299754, 0.934812459502907, -0.668766473494900,
             -0.0349894535589568],
            [-0.129321651962432, -0.407654958575404, -0.498928118538552, 0.914202708057584, -0.594727729204205,
             -0.0410790708927736],
            [-0.132971648371452, -0.451610332226548, -0.505726305491164, 0.892352357860631, -0.525174380848118,
             -0.0477463501726418],
            [-0.134069433473048, -0.502427486722489, -0.507684270087577, 0.869672143465652, -0.461018169518134,
             -0.0549134244036799],
            [-0.132794249624262, -0.559388040852430, -0.505396000070873, 0.846597524904403, -0.403120200334019,
             -0.0624876881279349],
            [-0.129307396411038, -0.621706741487087, -0.499464503573741, 0.823574976835944, -0.352267264940842,
             -0.0703531061364029],
            [-0.123746303742205, -0.688555454475780, -0.490471620394835, 0.801049967080151, -0.309152223272302,
             -0.0783612967305077],
            [-0.116217349729217, -0.759087628002915, -0.478946521278336, 0.779451175267190, -0.274345609161435,
             -0.0863178967701084],
            [-0.106792434347456, -0.832464063534068, -0.465345584374004, 0.759171916207949, -0.248274526736277,
             -0.0939709540174827],
            [-0.0955092184702536, -0.907868787824976, -0.450048673433018, 0.740556445838638, -0.231212689767926,
             -0.101006937123643],
            [-0.0823702359122833, -0.984522844342346, -0.433356196217226, 0.723884140102477, -0.223262527696814,
             -0.107046114100124],
            [-0.0673440056914531, -1.06169630309173, -0.415495578716769, 0.709350746058242, -0.224336068984465,
             -0.111644663067092],
            [-0.0503709633148932, -1.13870940199870, -0.396640210439898, 0.697061271993592, -0.234157670754115,
             -0.114312555704584],
            [-0.0313679920310773, -1.21493288367787, -0.376923792462136, 0.687022752140070, -0.252260809096821,
             -0.114531992088685],
            [-0.0102340952072604, -1.28978802448336, -0.356457308604357, 0.679133032563354, -0.277977378462664,
             -0.111786796130281],
            [0.0131401188044200, -1.36273869044134, -0.335347323539281, 0.673184769982163, -0.310451944726843,
             -0.105604170054202],
            [0.0388642714928788, -1.43328424918629, -0.313706417834899, 0.668873496628688, -0.348659329145779,
             -0.0955901561146892],
            [0.0670391798682061, -1.50095444984582, -0.291661673591104, 0.665802663498988, -0.391415859437454,
             -0.0814731405219310],
            [0.0977451491339481, -1.56530271889665, -0.269358556007454, 0.663499800147978, -0.437408897038819,
             -0.0631515895354386],
            [0.131033110092533, -1.62590074695473, -0.246958173898189, 0.661440153365853, -0.485238893211505,
             -0.0407153967952884],
            [0.166915708137113, -1.68233617120058, -0.224633838176669, 0.659065713461362, -0.533453997236790,
             -0.0144672971303219],
            [0.205354788472870, -1.73421221850565, -0.202564422914288, 0.655811236461434, -0.580598626094254,
             0.0150541518276016],
            [0.246255166494065, -1.78114834286836, -0.180925703001912, 0.651131963703304, -0.625266293170168,
             0.0470936563169389],
            [0.289460165299199, -1.82278224563059, -0.159883872159281, 0.644523841506451, -0.666139859316633,
             0.0807009116170851],
            [0.334743804060200, -1.85877430663879, -0.139587927300710, 0.635547713768687, -0.702041703948082,
             0.114751942466661],
            [0.381809278460058, -1.88881236455730, -0.120163547189678, 0.623848791763405, -0.731976836404932,
             0.148000812532253],
            [0.430293574045058, -1.91261461168719, -0.101711184578027, 0.609163656817427, -0.755151320470653,
             0.179133983410015],
            [0.479769371761234, -1.92993405492801, -0.0843040595173149, 0.591329182743384, -0.770995888188216,
             0.206818659489053],
            [0.529750540405642, -1.94056423253476, -0.0679878850551973, 0.570288886776979, -0.779186946753069,
             0.229768844519195],
            [0.579706525756238, -1.94434026465742, -0.0527857587385123, 0.546083279874415, -0.779631446897221,
             0.246802101072430],
            [0.629073814157314, -1.94114096987088, -0.0387023424051487, 0.518843529429521, -0.772457894899764,
             0.256884875169302],
            [0.677270070842472, -1.93089383360828, -0.0257291323851571, 0.488786662445898, -0.758012487053888,
             0.259193108930821],
            [0.723713797588895, -1.91357630695992, -0.0138527021280196, 0.456200642738729, -0.736829411617466,
             0.253151964692460],
            [0.767840011909130, -1.88921649583566, -0.00306118232825865, 0.421431628580270, -0.709603504278039,
             0.238454001308246],
            [0.809117034582898, -1.85789765313184, 0.00664944502518326, 0.384875272816686, -0.677173272953261,
             0.215088971560965],
            [0.847065887273266, -1.81976346193352, 0.0152689515294969, 0.346965397062891, -0.640496651473182,
             0.183359926667205],
            [0.881270956366051, -1.77501911176228, 0.0227708948328038, 0.308162511919660, -0.600622968003742,
             0.143858827864888],
            [0.911390093961773, -1.72393563604169, 0.0291120476164785, 0.268946402027675, -0.558675716135699,
             0.0974524336961139],
            [0.937168011587435, -1.66685882161267, 0.0342337944808633, 0.229808319084118, -0.515835253115665,
             0.0452638860429185],
            [0.958437262512150, -1.60421090260405, 0.0380692416875717, 0.191242457992336, -0.473316336461381,
             -0.0113873251500301],
            [0.975117197983865, -1.53649176798782, 0.0405507391455866, 0.153739632174005, -0.432351262575378,
             -0.0710366153851462],
            [0.987216660425086, -1.46428453828992, 0.0416195958390600, 0.117780057887851, -0.394172017593739,
             -0.132126171425373],
            [0.994828806246405, -1.38825465979521, 0.0412390415458074, 0.0838249343444122, -0.359987027566597,
             -0.193079068209042],
            [0.998120361516878, -1.30914106605313, 0.0394033888195662, 0.0523101081312035, -0.330961220834122,
             -0.252361269619998],
            [0.997325541757342, -1.22775005189080, 0.0361469663880460, 0.0236387059643898, -0.308194546539487,
             -0.308537017865008],
            [0.992737997791909, -1.14494342489301, 0.0315540379819051, -0.00182964634234570, -0.292690257168550,
             -0.360337866345150],
            [0.984696167839065, -1.06161501004503, 0.0257587480067762, -0.0237857112561517, -0.285331004284389,
             -0.406702597570840],
            [0.973573035037034, -0.978669895036774, 0.0189431375047810, -0.0419777926019844, -0.286855813573101,
             -0.446805863339476],
            [0.959765767148225, -0.896996795577841, 0.0113341460862481, -0.0562241351217819, -0.297822887348849,
             -0.480098067060747],
            [0.943681960005223, -0.817433387859055, 0.00319044670906708, -0.0664213383657894, -0.318582311589443,
             -0.506310916681483],
            [0.925729211766677, -0.740739733740081, -0.00521209517695589, -0.0725480170569032, -0.349262594720635,
             -0.525440905737447],
            [0.906305691353152, -0.667568303621963, -0.0135947624840213, -0.0746727435487687, -0.389745614044259,
             -0.537742621143026],
            [0.885789876258921, -0.598430638104210, -0.0216959191446977, -0.0729605073539677, -0.439643953901842,
             -0.543701926505533],
            [0.864535570978626, -0.533687739692827, -0.0292861206646791, -0.0676665009044110, -0.498312277402468,
             -0.543980983299678],
            [0.842868572088789, -0.473542359482134, -0.0361795141564342, -0.0591326241212265, -0.564851018284535,
             -0.539378678926144],
            [0.821083372545231, -0.418030925337240, -0.0422471785249741, -0.0477838466305122, -0.638106848130383,
             -0.530783928123125],
            [0.799445592619354, -0.367047617217600, -0.0474199778737522, -0.0341102487646522, -0.716712141772010,
             -0.519115227310294],
            [0.778195898487266, -0.320371158400638, -0.0516851230847250, -0.0186515274167132, -0.799122983599100,
             -0.505284369312692],
            [0.757552716487771, -0.277692648519219, -0.0550839857843874, -0.00198077373665232, -0.883655405870856,
             -0.490157243881412],
            [0.737713611667033, -0.238669797496565, -0.0577071441575653, 0.0153275971007658, -0.968556354686782,
             -0.474488200256563],
            [0.718868457596177, -0.202950537219842, -0.0596632313311752, 0.0327002371919272, -1.05205053906587,
             -0.458986927705043]
        ])
    def phase_detect(self):
        # 현재 DOF 중 [3:9]만 사용
        dofs = self.env.model.dof_position_array()
        dofs_rl = dofs[[3,4,5,6,7,8]]
        # 가장 가까운 reference index 찾기
        diffs = np.sum((self.reference_dofs - dofs_rl)**2, axis=1)
        idx  = np.argmin(diffs)
        # 0.01 단위 step → φ 반환
        return float(idx) * 0.01

    def reset(self, **kwargs):
        # 0) 랜덤 지형 선택
        idx = random.randint(1, self.n_terrains)
        scenario_file = os.path.join(
            self.terrain_dir,
            f"random_terrain_{idx}.scone"
        )

        # 1) env.model_file 덮어쓰기 + 모델 한 번만 로드
        self.env.model_file = scenario_file
        self.env.manually_load_model()

        # 2) reset 전에 내부 state 초기화
        #    (head_body 찾기, 초기 DOF pos/vel 캡처, output_dir, store flag 설정)
        self.env._find_head_body()
        self.env.init_dof_pos = self.env.model.dof_position_array().copy()
        self.env.init_dof_vel = self.env.model.dof_velocity_array().copy()
        # 원하는 저장 디렉토리로
        self.env.set_output_dir("DATE_TIME." + self.env.model.name())
        # store_next_episode() 플래그를 SCONE에 넘기기
        self.env.model.set_store_data(self._do_store_next)
        if self._do_store_next:
            self.env.store_next_episode()
            self._do_store_next = False


        # 3) 진짜 reset 호출 → 초기 상태 세팅
        super().reset(**kwargs)

        # 4) wrapper 전용 obs 반환
        return self._get_obs_3d()

    def step(self, action):
        # 2) [-1,1] → [0,1]
        self.env.steps += 1
        action = np.clip(action, -1.0, 1.0)
        action = 0.5 * (action + 1.0)

        # 3) synergy 적용
        if self.use_synergy:
            a_r_leg = action[:self.n_syn]
            a_l_leg = action[self.n_syn:2*self.n_syn]
            a_r_torso = action[2*self.n_syn:2*self.n_syn+5]
            a_l_torso = action[2*self.n_syn+5:2*self.n_syn+10]
            if self.use_symmetry:
                phi = self.phase_detect()
                if phi >= 0.5:
                    action = np.concatenate([a_l_leg.dot(self.syn_matrix), a_r_leg.dot(self.syn_matrix), a_l_torso, a_r_torso], axis=0)
                else:
                    action = np.concatenate([a_r_leg.dot(self.syn_matrix), a_l_leg.dot(self.syn_matrix), a_r_torso, a_l_torso], axis=0)
            else:
                action = np.concatenate([
                    a_r_leg.dot(self.syn_matrix),
                    a_l_leg.dot(self.syn_matrix),
                    a_r_torso,
                    a_l_torso
                ], axis =0)
        action = np.clip(action, 0, 1.0)

        self.env.model.set_actuator_inputs(action)
        self.env.model.advance_simulation_to(self.env.time + self.step_size)
        # 원본 step 실행 (obs 무시)
        # 6) compute reward with custom weighting
        rwd_dict = self._update_rwd_dict()
        reward   = sum(rwd_dict.values())
        obs = self._get_obs_3d()
        done   = self._get_done()
        reward = self.env._apply_termination_cost(reward, done)

        
        info = {
        "gaussian_vel": rwd_dict["gaussian_vel"],
        "constr"      : rwd_dict["constr"],
        "effort"      : rwd_dict["effort"],
        }
        if done:
            # env.steps 는 매 step 마다 GaitGym 내부에서 ++ 됩니다
            max_steps = getattr(self.env, '_max_episode_steps', None)
            if max_steps is not None and self.env.steps >= max_steps:
                # 시간 만료(terminal by timeout)
                info['timed_out'] = True
            else:
                # 중간에 넘어져서 떨어짐(terminal by fall)
                info['fell'] = True
                # fall 에만 패널티 적용
                reward -= self.fall_penalty
        # 8) update time & total reward
        self.env.time         += self.step_size
        self.env.total_reward += reward

        # 9) end‐of‐episode bookkeeping
        if done:
            if self.env.store_next:
                self.env.model.write_results(
                    self.env.output_dir,
                    f"{self.env.episode:05d}_{self.env.total_reward:.3f}"
                )
                self.env.store_next = False
            self.env.episode += 1

        return obs, reward, done, info

    def _get_obs_3d(self):
        # same as your modified method, but using self.env.*
        env = self.env

        acts = env.model.muscle_activation_array()
        env.prev_acts = acts.copy()
        env.prev_excs = env.model.muscle_excitation_array()
        
        Lleg = env.model.legs()[0]
        Rleg = env.model.legs()[1] 
        grf = np.array([ Lleg.contact_force().x , Lleg.contact_force().y , Lleg.contact_force().z,
                         Rleg.contact_force().x , Rleg.contact_force().y , Rleg.contact_force().z ]) / (env.model.mass()*9.81)

        dof_values = env.model.dof_position_array()
        dof_vels   = env.model.dof_velocity_array()
        dof_values[3] = 0.0
        dof_values[5] = 0.0

        m_fibl = env.model.muscle_fiber_length_array()
        m_fibv = env.model.muscle_fiber_velocity_array()
        m_force= env.model.muscle_force_array()
        m_exc  = env.model.muscle_excitation_array()

        head_or  = env.head_body.orientation().array()
        head_acc = env.head_body.com_acc().array()
        head_angv= env.head_body.ang_vel().array()
        feet     = env._get_feet_relative_position()

        def apply_sym(phi, musc_idc, musc_idc_m,
                      dof_idc, dof_idc_m,
                      feet_idc, feet_idc_m,
                      grf_idc, grf_idc_m):
            if phi >= 0.5:
                m_fibl[musc_idc] = m_fibl[musc_idc_m]
                m_fibv[musc_idc] = m_fibv[musc_idc_m]
                m_force[musc_idc]   = m_force[musc_idc_m]
                m_exc[musc_idc]     = m_exc[musc_idc_m]
                feet[feet_idc]  = feet[feet_idc_m]
                acts[musc_idc]      = acts[musc_idc_m]
                dof_values[dof_idc] = dof_values[dof_idc_m]
                dof_vels[dof_idc]   = dof_vels[dof_idc_m]
                grf[grf_idc] = grf[grf_idc_m]


        n_act = len(env.model.actuators())
        n_mus = len(env.model.muscles())
        if self.use_symmetry:
                phi = self.phase_detect()
                idx = np.arange(0, 90) 
                idx_m = np.concatenate([
                    np.arange(40, 80),  # 40 ~ 79
                    np.arange(0, 40),   # 0 ~ 39
                    np.arange(85, 90),  # 85 ~ 89
                    np.arange(80, 85)   # 80 ~ 84
                ])
                dof_idc, dof_idc_m = np.arange(21), np.array([0,1,2,3,4,5,12,13,14,15,16,17,6,7,8,9,10,11,18,19,20])
                feet_idc, feet_idc_m = np.arange(6), np.array([3,4,5,0,1,2])
                grf_idc, grf_idc_m = np.arange(6), np.array([3,4,5,0,1,2])
                apply_sym(phi, idx, idx_m, dof_idc, dof_idc_m, feet_idc, feet_idc_m, grf_idc, grf_idc_m)


        
        return np.concatenate([
            m_fibl, m_fibv, m_force, m_exc,
           head_or, head_acc, head_angv,
            feet, dof_values, dof_vels, acts, grf
        ], dtype=np.float32).copy()
    
        
    def _update_rwd_dict(self):
        # here self is the wrapper, so use self.env inside
        env = self.env
        return {
            "gaussian_vel": env.vel_coeff      * self._gaussian_vel(),
            "grf"         : 0            * env._grf(),
            "smooth"      : 0   * env._exc_smooth_cost(),
            "number_muscles": 0* env._number_muscle_cost(),
            "constr"      : env.joint_limit_coeff * env._joint_limit_torques(),
            "self_contact": 0  * env._get_self_contact(),
            "effort"      : -0.2 * self._effort_cost(),
            
        }
    
    def _gaussian_vel(self):
        # your new gaussian_vel implementation
        env = self.env
        c = 0.06
        v_var_x = 0.07**2
        v_var_z = 0.15**2
        lumb_rot_var=0.2**2
        # angvel_var = [0.2442**2, 0.2603**2, 0.3258**2] %너무 강해서 제거함함
        angvel_var = [0.6**2, 0.65**2, 1.2**2]
        acc_var    = [0.4799**2, 1.7942**2, 0.7716**2]

        vel_x = env.model_velocity()
        vel_z = env.model.com_vel().z
        lumb_rot = env.model.dof_position_array()[-1]
        head_angvel = env.head_body.ang_vel().array()
        head_acc    = env.head_body.com_acc().array()

        r_vel_x = np.exp(-c * (vel_x - env.target_vel)**2 / v_var_x)
        r_vel_z = np.exp(-c * vel_z**2 / v_var_z)
        r_lumb_rot= np.exp(-c * lumb_rot**2 / lumb_rot_var)
        #----------아래는 3축다!------------
        r_head_angvel = np.prod([
            np.exp(-c * head_angvel[i]**2 / angvel_var[i])
            for i in range(0,3,2)
        ])


        #----------------------------------
        #----------아래는 1축만--------------
        # r_head_angvel = np.prod([
        #     np.exp(-c * head_angvel[1]**2 / angvel_var[1])
        # ])
        r_head_acc = np.prod([
            np.exp(-c * head_acc[i]**2 / acc_var[i])
            for i in range(3)
        ])
        #----------------------------------
        return r_vel_x * r_head_angvel*r_vel_z*r_lumb_rot
    

    def _effort_cost(self):
        """
        Computes the normalized effort cost based on the cubic muscle activations
        plus scaled torso actuator inputs.
        """
        env = self.env
        # muscle activations
        activations = env.model.muscle_activation_array()

        return np.sum(np.power(activations, 3))
    
    def _get_done(self) -> bool:
            """
            The episode ends if the center of mass is below min_com_height.
            """
            env= self.env
            # COM 절대 높이 대신, 가장 낮은 발 위치를 기준으로 상대 높이 계산
            com_y    = env.model.com_pos().y
            foot_l_y = (
                [y for y in env.model.bodies() if "calcn_l" in y.name()][0]
                .com_pos().y
            )
            foot_r_y = (
                [y for y in env.model.bodies() if "calcn_r" in y.name()][0]
                .com_pos().y
            )
            ground_y = min(foot_l_y, foot_r_y)

            # 골반 기준 상대 높이가 threshold 이하이면 '넘어진 것'으로 간주
            REL_HEIGHT_THRESHOLD = 0.3  # 예시값: 0.2m
            if com_y <3:
                return True
            if com_y - ground_y < -REL_HEIGHT_THRESHOLD:
                return True
            if com_y - ground_y < REL_HEIGHT_THRESHOLD:
                return True
            if env.steps >= env._max_episode_steps:
                return True
            return False
    
    def store_next_episode(self):
        # wrapper 레벨에서 플래그만 세팅
        self._do_store_next = True

    def write_now(self):
        return self.env.write_now()
